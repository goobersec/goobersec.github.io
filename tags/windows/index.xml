<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Goobersec Blog</title>
    <link>https://goobersec.github.io/tags/windows/</link>
    <description>Recent content in Windows on Goobersec Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 May 2025 18:07:44 -0400</lastBuildDate>
    <atom:link href="https://goobersec.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploiting Stack-Based Buffer Overflows on x86_64 Windows with Unstripped Binaries</title>
      <link>https://goobersec.github.io/posts/stack-based-buffer-overflow-on-windows/</link>
      <pubDate>Wed, 28 May 2025 18:07:44 -0400</pubDate>
      <guid>https://goobersec.github.io/posts/stack-based-buffer-overflow-on-windows/</guid>
      <description>Outline In my previous post, I examined identifying a buffer overflow in a Linux binary. This time, I will be looking at a Windows executable that was provided to me as part of a low-level computing workshop. The goals of this exercise are to walk through the entire process of exploit development, from discovery to exploitation. I will:&#xA;Analyze a Windows binary using both static and dynamic debugging tools Identify vulnerable functions and understand how they fail Observe normal vs.</description>
    </item>
  </channel>
</rss>
